import glob, os
import numpy as np
import pandas as pd

import geopandas as gpd
import rasterio
import rasterio.mask
import rasterio.plot
from rasterio.enums import Resampling
import matplotlib.pyplot as plt
from pathlib import Path

## Set the path
computer_path = 'C:/Users/karma/Desktop/STUDY_UCL/THESIS/data/S2_indecies'

work_path = f'{computer_path}/LC1_DIFFERNECES/'

roi_path = 'C:/Users/karma/Desktop/STUDY_UCL/THESIS/study_area/LCs/LC1_edited'
dwl_path = f'{work_path}raw_S2_data'

# For each step of the preprocessing,
# a folder will be created to store
# the intermediary files.

resampled_path = f'{work_path}1_L2A_RESAMPLED/'
clipped_path   = f'{work_path}2_L2A_CLIPPED/'
masked_path    = f'{work_path}3_L2A_MASKED/'

Path(resampled_path).mkdir(parents=True, exist_ok=True)
Path(clipped_path).mkdir(parents=True, exist_ok=True)
Path(masked_path).mkdir(parents=True, exist_ok=True)



#select and reproject ROI file

roi_file     = f'{roi_path}/LC1_edited_agri_sparseVeg.shp'

roi_gdf = gpd.read_file(roi_file)

print(f'ROI shapefile : {roi_file}')
# Print the CRS of the shapefile
print(f"The CRS of the shapefile {roi_file} is {roi_gdf.crs}")
#roi_gdf.plot()
# Change the CRS of the GeoDataFrame to EPSG 32635
roi_gdf = roi_gdf.to_crs("EPSG:32635")

# Print the CRS of the new GeoDataFrame
print(f"The new CRS of the GeoDataFrame is {roi_gdf.crs}")




band_10m_list = ['B02','B03','B04','B08']

band_20m_list = ['B05', 'B06', 'B07', 'B8a', 'B11', 'B12']

# We will upscale the image by 2: 20m --> 10m
upscale_factor = 2

# As SCL is categorical data, we MUST use "nearest neighbor" resampling method
resampling_method_categorical = Resampling.nearest

# As BOA is continuous data, we can use other resampling methods : nearest, bilinear, cubic
resampling_method_continuous = Resampling.bilinear

nodata_val = -10000


list_L2A = glob.glob(f'{dwl_path}/S2*.SAFE')

print(f'{len(list_L2A)} L2A will be pre-processed \n')

for L2A_safe in list_L2A:
    L2A_name = os.path.basename(L2A_safe)
    print(L2A_name)



####Resample Scene Classification map####

for L2A_safe in list_L2A:

    im_file_20m = glob.glob(f'{L2A_safe}/GRANULE/*/IMG_DATA/R20m/*_SCL_20m.jp2')[0]
    im_file_20m = im_file_20m.replace('\\','/')

    im_file_10m = f'{resampled_path}{os.path.basename(im_file_20m).replace("20m","10m").replace("jp2","tif")}'

    if not os.path.isfile(im_file_10m):

        # Open file
        src = rasterio.open(im_file_20m, "r", driver='JP2OpenJPEG')

        # Resample data to target shape
        resampled_data = src.read(out_shape = (src.count,
                                               int(src.height * upscale_factor),
                                               int(src.width * upscale_factor)
                                               ),
                                  resampling = resampling_method_categorical)

        # Scale image transform
        new_transform = src.transform * src.transform.scale(
            (src.width / resampled_data.shape[-1]),
            (src.height / resampled_data.shape[-2])
        )

        # Update metadata
        profile = src.profile
        profile.update(driver = 'GTiff',
                       width = src.width*upscale_factor,
                       height = src.height*upscale_factor,
                       transform = new_transform)


        # Write resampled image
        dst = rasterio.open(im_file_10m, "w", **profile)
        dst.write(resampled_data)

        # Close rasterio objects
        src.close()
        dst.close()

        print(f'--> A new resampled raster file is created : {im_file_10m}')

print('--> All SCL are resampled !')




## to create a new resampled raster file 
for L2A_safe in list_L2A:

    for band in band_20m_list:

        im_file_20m = glob.glob(f'{L2A_safe}/GRANULE/*/IMG_DATA/R20m/*{band}_20m.jp2')[0]
        im_file_20m = im_file_20m.replace('\\','/')

        im_file_10m = f'{resampled_path}{os.path.basename(im_file_20m).replace("20m","10m").replace("jp2","tif")}'


        if not os.path.isfile(im_file_10m):

            # Open file
            src = rasterio.open(im_file_20m, "r", driver='JP2OpenJPEG')

            # Resample data to target shape
            resampled_data = src.read(out_shape = (src.count,
                                                   int(src.height * upscale_factor),
                                                   int(src.width * upscale_factor)
                                                   ),
                                    resampling = resampling_method_continuous)

            # Scale image transform
            new_transform = src.transform * src.transform.scale(
                (src.width / resampled_data.shape[-1]),
                (src.height / resampled_data.shape[-2])
            )

            # Update metadata
            profile = src.profile
            profile.update(driver = 'GTiff',
                           width = src.width*upscale_factor,
                           height = src.height*upscale_factor,
                           transform = new_transform)


            # Write resampled image
            dst = rasterio.open(im_file_10m, "w", **profile)
            dst.write(resampled_data)

            # Close rasterio objects
            src.close()
            dst.close()

            print(f'--> A new resampled raster file is created : {im_file_10m}')

print('--> All reflectances are resampled !')

### to check how many img needs to be clipped
list_im_to_clip = glob.glob(f'{resampled_path}*_10m.tif')

for band in band_10m_list:

    list_im_to_clip += glob.glob(f'{dwl_path}/*.SAFE/GRANULE/*/IMG_DATA/R10m/*{band}_10m.jp2')

print(f'There are {len(list_im_to_clip)} images to clip')




for im_file in list_im_to_clip:

    im_file_roi = f'{clipped_path}{os.path.basename(im_file)[:-4]}_ROI.tif'

    if not os.path.isfile(im_file_roi):

        # Open file
        src = rasterio.open(im_file, "r")

        # Clip the raster to the extent of the shape
        out_image, out_transform = rasterio.mask.mask(src,
                                                      roi_gdf.geometry,
                                                      all_touched=True,
                                                      crop=True)

        # Update metadata
        out_meta = src.meta

        out_meta.update(driver='GTiff',
                        width = out_image.shape[2],
                        height = out_image.shape[1],
                        transform = out_transform)

        # Write clipped image
        dst = rasterio.open(im_file_roi, "w", **out_meta)
        dst.write(out_image)

        # Close rasterio objects
        src.close()
        dst.close()


        print(f'A new raster file is created : {im_file_roi}')

print('--> All images are clipped !')


## calculate indices one by one by removing # here
#index_name = 'NDVI'
#index_name = 'NDWI'
#index_name = 'NDSI'
#index_name = 'BRIGHTNESS'
#index_name = 'NBR'
#index_name = 'BAIS2'
#index_name = 'SWI'
nodata_val = -10000

print(f'You chose to compute {index_name} !')


# Directory for all work files

reflectance_path  = f'{work_path}2_L2A_CLIPPED/' #clipped_resampled_all_bands

index_path = f'{work_path}{index_name}/'

index_calc_path = f'{work_path}{index_name}_CALC/'

Path(index_path).mkdir(parents=True, exist_ok=True)
Path(index_calc_path).mkdir(parents=True, exist_ok=True)





#### Formulas
if index_name == 'NDVI':
    bands_needed = ['B04','B08']
    list_im_path = [reflectance_path,
                    reflectance_path]

elif index_name == 'NDWI':
    bands_needed = ['B08','B11']
    list_im_path = [reflectance_path,
                    reflectance_path]

elif index_name == 'NDSI':
    bands_needed = ['B03','B11']
    list_im_path = [reflectance_path,
                    reflectance_path]

elif index_name == 'BRIGHTNESS':
    bands_needed = ['B03','B04','B08','B11']
    list_im_path = [reflectance_path,
                    reflectance_path,
                    reflectance_path,
                    reflectance_path]

elif index_name == 'NBR':
    bands_needed = ['B08','B12']
    list_im_path = [reflectance_path,
                    reflectance_path]

elif index_name == 'BAIS2':
    bands_needed = ['B04','B06','B07','B8A','B12']
    list_im_path = [reflectance_path,
                    reflectance_path,
                    reflectance_path,
                    reflectance_path,
                    reflectance_path,]

elif index_name == 'SWI':
    bands_needed = ['NDVI','NDWI']
    list_im_path = [f'{work_path}NDVI/',
                    f'{work_path}NDWI/']


print(f'To compute {index_name} you need : {bands_needed}')



for i,band in enumerate(bands_needed):

    print(f'We need band/index {band} to compute {index_name}')
    list_im = glob.glob(f'{list_im_path[i]}*{band}*.tif')

    nb_im = len(list_im)
    print(f'--> {nb_im} images are found \n')

print('Check if the number of images found for each band/index is the same !!')


# The purpose of this loop is to compute the spectral index for all the images of the timeserie
for i in range(0,nb_im):

    # Find the image filename and the associated date (available in the filename)
    im   = sorted(glob.glob(f'{list_im_path[0]}*{bands_needed[0]}*.tif'))[i]
    date = os.path.basename(im)[7:15]

    print(f'Date : {date}')

    # Start a list to gather all the spectral bands you will need to compute the spectral index
    list_im = [im]

    # Then we need to find the other spectral band needed to compute the spectral index and add it to the list
    for n,band in enumerate(bands_needed[1:]):
        im = glob.glob(f'{list_im_path[n+1]}*{date}*{band}*.tif')[0]
        list_im.append(im)

    # Name the output spectral indice file
    index_file = f'{index_path}{os.path.basename(list_im[0])[0:22]}_{index_name}.tif'

    # If the spectral index for this data does not exist --> create it
    if  not os.path.isfile(index_file):

        # Create a list with all reflectance images needed to compute the spectral index in Numpy array
        list_im_arr = []

        for im_file in list_im:

            # Open band and update metadata
            src = rasterio.open(im_file, 'r')
            profile = src.profile
            profile.update(dtype=rasterio.float64)
            im = src.read(1)

            # Convert no-data value into Numpy NaN
            im = im.astype(float)
            im[im == nodata_val] = np.nan

            src.close()

            list_im_arr.append(im)

        # Compute the Spectral Index you have selected

        if index_name == 'NDVI':
            red = list_im_arr[0] # B04
            nir = list_im_arr[1] # B08

            index_arr = (nir - red) / (nir + red)

        elif index_name == 'NDWI':
            nir  = list_im_arr[0] # B08
            swir = list_im_arr[1] # B11

            index_arr = (nir - swir) / (nir + swir)

        elif index_name == 'NDSI':
            green = list_im_arr[0] # B03
            swir  = list_im_arr[1] # B11

            index_arr = (green - swir) / (green + swir)

        elif index_name == 'NBR':
            nir  = list_im_arr[0] # B08
            swir = list_im_arr[1] # B12

            index_arr = (nir - swir) / (nir + swir)

        elif index_name == 'BRIGHTNESS':
            green = list_im_arr[0] # B03
            red   = list_im_arr[1] # B04
            nir   = list_im_arr[2] # B08
            swir  = list_im_arr[3] # B11

            index_arr = np.sqrt(np.square(green) + np.square(red) + np.square(nir) + np.square(swir))

        elif index_name == 'BAIS2':
            red         = list_im_arr[0] # B04
            redEdge_B6  = list_im_arr[1] # B06
            redEdge_B7  = list_im_arr[2] # B07
            nir         = list_im_arr[3] # B08
            swir        = list_im_arr[4] # B12

            index_arr = (1-np.sqrt((redEdge_B6*redEdge_B7*nir)/red))*((swir-nir)/(np.sqrt(swir+nir))+1)

        elif index_name == 'SWI':
            ndvi = list_im_arr[0] # NDVI
            ndwi = list_im_arr[1] # NDWI

            index_arr = np.square(ndvi - ndwi)

        # Write Spectral Index image into GeoTIFF

        dst = rasterio.open(index_file, "w", **profile)
        dst.write(index_arr,1)
        dst.close()

        print(f'A new {index_name} file is created : {index_file}')


print(f'--> All {index_name} are computed !')

### compute differences 

# Choose the two dates you want to subtract
date_1 = '20200114'
date_2 = '20210202'

# Get the spectral indices associated with the dates you have chosen
index_file_1 = glob.glob(f'{index_path}*{date_1}*.tif')[0]
index_file_2 = glob.glob(f'{index_path}*{date_2}*.tif')[0]

# Name the output index file
index_file_diff = f'{index_calc_path}{index_name}_{date_2}_MINUS_{date_1}.tif'

if not os.path.isfile(index_file_diff):

    # Open the spectral index at date 1
    src = rasterio.open(index_file_1, 'r')
    profile = src.profile
    date_1_arr = src.read(1)
    src.close()

    # Open the spectral index at date 2
    src = rasterio.open(index_file_2, 'r')
    date_2_arr = src.read(1)
    src.close()

    # Compute the difference between date 2 and date 1
    diff_index = date_2_arr - date_1_arr

    # Write the output in GeoTIFF
    dst = rasterio.open(index_file_diff, "w", **profile)
    dst.write(diff_index,1)
    dst.close()

    print(f'A new {index_file_diff} file is created : {index_file_diff}')

else:
    print(f'--> {index_file_diff} - already exists')


#plot the difference map

fig, ax = plt.subplots(1, 1, figsize=(15,15))

color_map = plt.cm.get_cmap("bwr")

src = rasterio.open(index_file_diff, "r")
im_rio = rasterio.plot.show(src, cmap=color_map, vmin=-1, vmax=1, ax=ax)
im_rio = im_rio.get_images()[0]

cax = fig.add_axes([ax.get_position().x1+0.01,ax.get_position().y0,0.02,ax.get_position().height])
plt.colorbar(im_rio, ax=ax, cax=cax)

plt.box(False)

